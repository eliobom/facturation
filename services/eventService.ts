import { Event } from '@/types';

// Mock events database - in a real app, this would come from a backend service
let events: Event[] = [
  {
    id: '1',
    title: 'Team Training Session',
    description: 'Regular training for all team members. Focus on passing and positioning.',
    location: 'Main Field',
    team: 'Team A',
    type: 'training',
    startTime: new Date(new Date().setHours(10, 0, 0, 0)),
    endTime: new Date(new Date().setHours(12, 0, 0, 0)),
    createdAt: new Date(Date.now() - 86400000),
  },
  {
    id: '2',
    title: 'Match vs FC United',
    description: 'League match against FC United. Arrive 1 hour before for warm-up.',
    location: 'City Stadium',
    team: 'Team A',
    type: 'match',
    startTime: new Date(new Date().setDate(new Date().getDate() + 2)),
    endTime: new Date(new Date().setDate(new Date().getDate() + 2)),
    createdAt: new Date(Date.now() - 172800000),
  },
  {
    id: '3',
    title: 'Conditioning Training',
    description: 'Physical conditioning and endurance training.',
    location: 'Training Complex',
    team: 'All Teams',
    type: 'training',
    startTime: new Date(new Date().setDate(new Date().getDate() + 1)),
    endTime: new Date(new Date().setDate(new Date().getDate() + 1)),
    createdAt: new Date(Date.now() - 259200000),
  },
];

// Simulate API delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export const fetchEvents = async (month?: number): Promise<Event[]> => {
  // Simulate API call
  await delay(1000);
  
  if (month !== undefined) {
    return events.filter(event => new Date(event.startTime).getMonth() === month);
  }
  
  return events;
};

export const fetchUpcomingEvents = async (): Promise<Event[]> => {
  // Simulate API call
  await delay(800);
  
  const now = new Date();
  
  // Get events that are happening today or in the future
  return events
    .filter(event => new Date(event.startTime) >= now)
    .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime())
    .slice(0, 3); // Get only the next 3 events
};

export const addEvent = async (event: Event): Promise<Event> => {
  // Simulate API call
  await delay(1000);
  
  // In a real app, the ID would be generated by the backend
  const newEvent = {
    ...event,
    id: String(events.length + 1),
    createdAt: new Date(),
  };
  
  events.push(newEvent);
  
  return newEvent;
};

export const updateEvent = async (updatedEvent: Event): Promise<Event> => {
  // Simulate API call
  await delay(1000);
  
  const index = events.findIndex(e => e.id === updatedEvent.id);
  
  if (index === -1) {
    throw new Error('Event not found');
  }
  
  events[index] = updatedEvent;
  
  return updatedEvent;
};

export const deleteEvent = async (eventId: string): Promise<void> => {
  // Simulate API call
  await delay(1000);
  
  events = events.filter(e => e.id !== eventId);
};